1-1
题目: 在具有N个结点的单链表中，访问结点和增加结点的时间复杂度分别对应为O(1)和O(N)。
回答: F
解释: 在单链表中，访问特定结点的时间复杂度是 O(N)，因为需要从头结点开始遍历。而增加结点（在头部插入）是 O(1)。

1-2
题目: 线性表L如果需要频繁地进行不同下标元素的插入、删除操作，此时选择顺序存储结构更好。
回答: F
解释: 顺序存储结构在插入和删除时需要移动大量元素，时间复杂度为 O(N)。链式存储结构在这些操作上效率更高。

1-3
题目: 若用链表来表示一个线性表，则表中元素的地址一定是连续的。
回答: F
解释: 链表的元素在内存中不一定是连续的，链表的每个结点通过指针连接。

1-4
题目: 将长度分别为m,n的两个单链表合并为一个单链表的时间复杂度为O(m+n)。
回答: T
解释: 合并两个链表时，需要遍历两个链表的所有结点，因此时间复杂度为 O(m + n)。

1-5
题目: 在单链表中，要访问某个结点，只要知道该结点的指针即可。因此，单链表是一种随机存取结构。
回答: F
解释: 单链表不是随机存取结构，因为要访问特定结点必须从头结点开始逐个遍历。

1-6
题目: 链表是采用链式存储结构的线性表,进行插入、删除操作时，在链表中比在顺序存储结构中效率高。
回答: T
解释: 链表在插入和删除操作时不需要移动其他元素，时间复杂度为 O(1)（在已知位置的情况下），相比顺序存储结构更高效。

1-7
题目: 算法分析的两个主要方面是时间复杂度和空间复杂度的分析。
回答: T
解释: 算法分析通常关注时间复杂度和空间复杂度，这两者是评估算法性能的重要指标。

1-8
题目: 对于某些算法，随着问题规模的扩大，所花的时间不一定单调增加。
回答: T
解释: 对于某些算法，尤其是随机算法或具有不确定性行为的算法，运行时间可能会波动。

1-9
题目: 线性表的插入、删除总是伴随着大量数据的移动。
回答: F
解释: 在链式存储结构中，插入和删除不需要移动其他元素，而在顺序存储结构中则需要。

1-10
题目: 算法可以没有输入，但是必须有输出。
回答: F
解释: 算法可以没有输出，特别是在某些情况下（如初始化或设置），但通常算法需要输入和输出。

1-11
题目: 带头结点的单循环链表中，任一结点的后继结点的指针域均不空。
回答: F
解释: 在单循环链表中，最后一个结点的后继指针指向头结点，因此其指针域不为空，但并不是所有结点的后继指针都不为空。

1-12
题目: 循环链表可以做到从任一结点出发，访问到链表的全部结点。
回答: T
解释: 循环链表的特性使得从任一结点出发都可以遍历到所有结点。

1-13
题目: 在单链表中，逻辑上相邻的元素，其物理位置必定相邻。
回答: F
解释: 单链表的逻辑相邻元素在物理内存中不一定相邻，因为它们通过指针连接。

1-14
题目: 在双向链表中，可以从当前结点出发访问到任何一个结点。
回答: T
解释: 双向链表允许从当前结点向前或向后遍历，因此可以访问到任意结点。

1-15
题目: 线性表采用链式存储结构时，各个数据元素的存储单元地址一定是不连续的。
回答: T
解释: 链式存储结构的元素在内存中不需要是连续的。

1-16
题目: 对单链表来说，只有从头结点开始才能访问到表中所有结点。
回答: T
解释: 单链表只能从头结点开始访问，因为没有指向前一个结点的指针。

1-17
题目: 抽象数据类型中基本操作的定义与具体实现有关。
回答: F
解释: 抽象数据类型（ADT）关注的是操作的定义和性质，而与具体实现无关。

1-18
题目: 算法最坏情况下的时间复杂度是指算法求解输入规模为n的问题实例所需的最多基本运算次数。
回答: T
解释: 最坏情况时间复杂度确实是指在最不利情况下算法的运行时间。

1-19
题目: 时间复杂度是根据算法写成的程序在执行时耗费时间的长度，往往与输入数据的规模有关。
回答: T
解释: 时间复杂度通常表示算法执行时间与输入规模之间的关系。

1-20
题目: 空间复杂度是根据算法写成的程序在执行时占用存储单元的长度，往往与输入数据的规模有关。
回答: T
解释: 空间复杂度确实与算法所需的存储空间和输入规模有关。